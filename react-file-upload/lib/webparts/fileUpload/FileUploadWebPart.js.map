{"version":3,"sources":["webparts/fileUpload/FileUploadWebPart.ts"],"names":[],"mappings":"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","file":"webparts/fileUpload/FileUploadWebPart.js","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDom from 'react-dom';\r\nimport { Version } from '@microsoft/sp-core-library';\r\nimport {\r\n  BaseClientSideWebPart,\r\n  IPropertyPaneConfiguration,\r\n  PropertyPaneTextField,\r\n  IWebPartContext\r\n} from '@microsoft/sp-webpart-base';\r\nimport { IDigestCache, DigestCache } from '@microsoft/sp-http';\r\nimport * as strings from 'FileUploadWebPartStrings';\r\nimport FileUpload from './components/FileUpload';\r\nimport { IFileUploadProps } from './components/IFileUploadProps';\r\nimport * as loader from '@microsoft/sp-loader';\r\nimport { PropertyFieldListPicker, PropertyFieldListPickerOrderBy } from '../../PropertyFieldListPicker';\r\nimport { PropertyPaneDropdown } from '@microsoft/sp-webpart-base/lib/propertyPane/propertyPaneFields/propertyPaneDropdown/PropertyPaneDropdown';\r\nexport interface IFileUploadWebPartProps {\r\n  listName:string;\r\n  fileTypes:string;\r\n  queryString:string;\r\n  uploadFilesTo:string;\r\n}\r\nrequire(\"./filepicker.css\");\r\nrequire(\"./dropzone.css\");\r\nexport default class FileUploadWebPart extends BaseClientSideWebPart<IFileUploadWebPartProps> {\r\n  public digest:string=\"\";\r\n  public constructor(context:IWebPartContext){\r\n    super();    \r\n    loader.SPComponentLoader.loadCss('https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css');\r\n  }\r\n  protected onInit(): Promise<void> {\r\n    return new Promise<void>((resolve: () => void, reject: (error: any) => void): void => {\r\n      const digestCache: IDigestCache = this.context.serviceScope.consume(DigestCache.serviceKey);\r\n      digestCache.fetchDigest(this.context.pageContext.web.serverRelativeUrl).then((digest: string): void => {\r\n        // use the digest here\r\n        this.digest=digest;\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n  public render(): void {\r\n    const element: React.ReactElement<IFileUploadProps > = React.createElement(\r\n      FileUpload,\r\n      {\r\n        digest:this.digest,\r\n        context:this.context,\r\n        listName:this.properties.listName,\r\n        fileTypes:this.properties.fileTypes,\r\n        queryString:this.properties.queryString,\r\n        uploadFilesTo:this.properties.uploadFilesTo\r\n      }\r\n    );\r\n\r\n    ReactDom.render(element, this.domElement);\r\n  }\r\n  //@ts-ignore\r\n  protected get dataVersion(): Version {\r\n    return Version.parse('1.0');\r\n  }\r\n\r\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\r\n    return {\r\n      pages: [\r\n        {\r\n          header: {\r\n            description: strings.PropertyPaneDescription\r\n          },\r\n          groups: [\r\n            {\r\n              groupName: strings.BasicGroupName,\r\n              groupFields: [\r\n                PropertyPaneDropdown('uploadFilesTo',{\r\n                  label:'Upload files to',\r\n                  options:[{key:'DocumentLibrary',text:'Document Library'},\r\n                           {key:'List',text:'As item attachments'} ]\r\n                }),\r\n                PropertyFieldListPicker('listName', {\r\n                  label: 'Select a list or library',\r\n                  selectedList: this.properties.listName,\r\n                  includeHidden: true,\r\n                  //baseTemplate: 109,\r\n                  orderBy: PropertyFieldListPickerOrderBy.Title,\r\n                  // multiSelect: false,\r\n                  disabled: false,\r\n                  onPropertyChange: this.onPropertyPaneFieldChanged.bind(this),\r\n                  properties: this.properties,\r\n                  context: this.context,                  \r\n                  onGetErrorMessage: null,\r\n                  deferredValidationTime: 0,\r\n                  key: 'listPickerFieldId'\r\n                }),\r\n                PropertyPaneTextField('fileTypes',{\r\n                  label:'File Types (utiliser , comme separateur)',                  \r\n                }),\r\n                PropertyPaneTextField('queryString',{\r\n                  label:'Query String parameter',\r\n                  description:'Si vous souhaitez joindre des fichiers a un element de liste, vous devez definir ID de lelement dans un parametre de chaine de requete, example: ID=1'\r\n                })\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}