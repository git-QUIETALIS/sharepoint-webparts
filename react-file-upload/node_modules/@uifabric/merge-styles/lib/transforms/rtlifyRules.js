"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _nameReplacements = {
    'left': 'right',
    'right': 'left'
};
var _valueReplacements = {
    'w-resize': 'e-resize',
    'sw-resize': 'se-resize',
    'nw-resize': 'ne-resize'
};
var NO_FLIP = '@noflip';
var _rtl = getRTL();
function setRTL(isRTL) {
    _rtl = isRTL;
}
exports.setRTL = setRTL;
function getRTL() {
    if (_rtl === undefined) {
        _rtl = (typeof document !== 'undefined' &&
            !!document.documentElement &&
            document.documentElement.getAttribute('dir') === 'rtl');
    }
    return _rtl;
}
exports.getRTL = getRTL;
function rtlifyRules(rulePairs, index) {
    if (getRTL()) {
        var name_1 = rulePairs[index];
        var value = rulePairs[index + 1];
        if (value.indexOf(NO_FLIP) >= 0) {
            rulePairs[index + 1] = value.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g, '');
        }
        else if (name_1.indexOf('left') >= 0) {
            rulePairs[index] = name_1.replace('left', 'right');
        }
        else if (name_1.indexOf('right') >= 0) {
            rulePairs[index] = name_1.replace('right', 'left');
        }
        else if (String(value).indexOf('left') >= 0) {
            rulePairs[index + 1] = value.replace('left', 'right');
        }
        else if (String(value).indexOf('right') >= 0) {
            rulePairs[index + 1] = value.replace('right', 'left');
        }
        else if (_nameReplacements[name_1]) {
            rulePairs[index] = _nameReplacements[name_1];
        }
        else if (_valueReplacements[value]) {
            rulePairs[index + 1] = _valueReplacements[value];
        }
        else {
            switch (name_1) {
                case 'margin':
                case 'padding':
                    rulePairs[index + 1] = flipQuad(value);
                    break;
                case 'box-shadow':
                    rulePairs[index + 1] = negateNum(value, 0);
                    break;
            }
        }
    }
}
exports.rtlifyRules = rtlifyRules;
function negateNum(value, partIndex) {
    var parts = value.split(' ');
    var numberVal = parseInt(parts[partIndex], 10);
    parts[0] = parts[0].replace(String(numberVal), String(numberVal * -1));
    return parts.join(' ');
}
function flipQuad(value) {
    if (typeof value === 'string') {
        var parts = value.split(' ');
        if (parts.length === 4) {
            return parts[0] + " " + parts[3] + " " + parts[2] + " " + parts[1];
        }
    }
    return value;
}
//# sourceMappingURL=rtlifyRules.js.map